type MatchFunc = () => void;

interface IRegexerExpect {
  input?: string;
  readonly toMatch: MatchFunc;
  readonly toNotMatch: MatchFunc;
  // readonly assertMatchAll: MatchFunc;
  // readonly assertNoMatchAll: MatchFunc;
  // readonly assertMatchCapture: MatchFunc;
  // readonly assertNoMatchCapture: MatchFunc;
  // readonly assertMatchAllCapture: MatchFunc;
  // readonly assertNoMatchAllCapture: MatchFunc;
  // readonly assertMatchGroup: MatchFunc;
  // readonly assertNoMatchGroup: MatchFunc;
  // readonly assertMatchAllGroup: MatchFunc;
  // readonly assertNoMatchAllGroup: MatchFunc;
  // readonly assertMatchNamedGroup: MatchFunc;
  // readonly assertNoMatchNamedGroup: MatchFunc;
  // readonly assertMatchAllNamedGroup: MatchFunc;
  // readonly assertNoMatchAllNamedGroup: MatchFunc;
  // readonly assertMatchLookahead: MatchFunc;
  // readonly assertNoMatchLookahead: MatchFunc;
  // readonly assertMatchAllLookahead: MatchFunc;
  // readonly assertNoMatchAllLookahead: MatchFunc;
  // readonly assertMatchLookbehind: MatchFunc;
  // readonly assertNoMatchLookbehind: MatchFunc;
  // readonly assertMatchAllLookbehind: MatchFunc;
  // readonly assertNoMatchAllLookbehind: MatchFunc;
  // readonly assertMatchWordBoundary: MatchFunc;
  // readonly assertNoMatchWordBoundary: MatchFunc;
  // readonly assertMatchAllWordBoundary: MatchFunc;
  // readonly assertNoMatchAllWordBoundary: MatchFunc;
  // readonly assertMatchLineBoundary: MatchFunc;
  // readonly assertNoMatchLineBoundary: MatchFunc;
  // readonly assertMatchAllLineBoundary: MatchFunc;
  // readonly assertNoMatchAllLineBoundary: MatchFunc;
  // readonly assertMatchStringBoundary: MatchFunc;
  // readonly assertNoMatchStringBoundary: MatchFunc;
  // readonly assertMatchAllStringBoundary: MatchFunc;
  // readonly assertNoMatchAllStringBoundary: MatchFunc;
  // readonly assertMatchCharacter: MatchFunc;
  // readonly assertNoMatchCharacter: MatchFunc;
  // readonly assertMatchAllCharacter: MatchFunc;
  // readonly assertNoMatchAllCharacter: MatchFunc;
  // readonly assertMatchCharacterRange: MatchFunc;
  // readonly assertNoMatchCharacterRange: MatchFunc;
  // readonly assertMatchAllCharacterRange: MatchFunc;
  // readonly assertNoMatchAllCharacterRange: MatchFunc;
  // readonly assertMatchCharacterClass: MatchFunc;
  // readonly assertNoMatchCharacterClass: MatchFunc;
  // readonly assertMatchAllCharacterClass: MatchFunc;
  // readonly assertNoMatchAllCharacterClass: MatchFunc;
  // readonly assertMatchCharacterClassRange: MatchFunc;
  // readonly assertNoMatchCharacterClassRange: MatchFunc;
  // readonly assertMatchAllCharacterClassRange: MatchFunc;
  // readonly assertNoMatchAllCharacterClassRange: MatchFunc;
  // readonly assertMatchCharacterClassEscape: MatchFunc;
  // readonly assertNoMatchCharacterClassEscape: MatchFunc;
  // readonly assertMatchAllCharacterClassEscape: MatchFunc;
  // readonly assertNoMatchAllCharacterClassEscape: MatchFunc;
  // readonly assertMatchCharacterClassEscapeRange: MatchFunc;
  // readonly assertNoMatchCharacterClassEscapeRange: MatchFunc;
  // readonly assertMatchAllCharacterClassEscapeRange: MatchFunc;
  // readonly assertNoMatchAllCharacterClassEscapeRange: MatchFunc;
  // readonly assertMatchCharacterClassEscapeClass: MatchFunc;
  // readonly assertNoMatchCharacterClassEscapeClass: MatchFunc;
  // readonly assertMatchAllCharacterClassEscapeClass: MatchFunc;
  // readonly assertNoMatchAllCharacterClassEscapeClass: MatchFunc;
  // readonly assertMatchCharacterClassEscapeProperty: MatchFunc;
  // readonly assertNoMatchCharacterClassEscapeProperty: MatchFunc;
  // readonly assertMatchAllCharacterClassEscapeProperty: MatchFunc;
  // readonly assertNoMatchAllCharacterClassEscapeProperty: MatchFunc;
}

export default IRegexerExpect;
